###########################
# Definition of functions #
###########################

FUNC_BLOODLUST(*UNIT,ROUND_COUNT,IS_BASIC)={
	NEW(UNIT_BUFF,BUFF),
	BUFF.TICK_TYPE=PER_ROUND,
	BUFF.TICK_COUNT=ROUND_COUNT,
	BUFF.RESULTS={
		ON=UNIT.MELEE_ATTACK,
		FUNCTION=LAMBDA(VAR(UNIT),
			[
				IF(IS_BASIC),
				THEN(RETURN(UNIT.MELEE_ATTACK.ADD(3))),
				ELSE(RETURN(UNIT.MELEE_ATTACK.ADD(6))),
			]),
		FUNCTION_PARAMETERS=[UNIT],
	},
	UNIT.STATUS.ADD(BUFF),
	RETURN(UNIT),
}

FUNC_CURSE(*UNIT,ROUND_COUNT)=[
	NEW(UNIT_DEBUFF,DEBUFF),
	DEBUFF.TICK_TYPE=PER_ROUND,
	DEBUFF.TICK_COUNT=ROUND_COUNT,
	DEBUFF.RESULTS={
		ON=UNIT.DAMAGE,
		FUNCTION=LAMBDA(VAR(UNIT),
			[
				RETURN(UNIT.MIN_DAMAGE)
			]),
		FUNCTION_PARAMETERS=[UNIT],
	},
	UNIT.STATUS.ADD(DEBUFF),
	RETURN(UNIT),
]


FUNC_MAGIC_RESISTANCE(TARGET,HIT_BY_MAGIC_TYPE,RESISTANCE,DAMAGE)=[
	IF(CONTAINS(TARGET,HIT_BY_MAGIC_TYPE)),
	THEN(
		RETURN(MULTIPLY(RESISTANCE,DAMAGE))
	),
	RETURN(DAMAGE),
]

FUNC_PHOENIX_REBIRTH(REBIRTH_RATIO,STACK_NUMBER)=[
	RETURN(
		ADD(
			INT_FLOOR(MULTIPLY(REBIRTH_RATIO,STACK_NUMBER)),
			MULTIPLY(RAND01,REBIRTH_RATIO,STACK_NUMBER),
		)
	)
]

FUNC_CURE(CURE_POINT,POWER,MAX_HP)=[
	RETURN(POWER.MULTIPLY(5).ADD(CURE_POINT).MAX(MAX_HP), RESULT)
]

FUNC_BALLISTA_DAMAGE(
	SECONDARY_SKILL_ARTILLERY_LEVEL,
	SECONDARY_SKILL_ARCHERY_LEVEL,
	IS_SPECIALTY_SKILL_BALLISTA_EXISTS,
	BALLISTA_MIN_DAMAGE, #2
	BALLISTA_MAX_DAMAGE, #3
	BALLISTA_ATTACK,     #10
	HERO_ATTACK,
	DEFENDER_CURRENT_RANGED_DEFENSE,
	HERO_LEVEL)=[
	
	VAR(ARTILLERY_BONUS,0),
	SWITCH(SECONDARY_SKILL_ARTILLERY_LEVEL),
		CASE(BASIC,[SET(ARTILLERY_BONUS,0.5)]),
		CASE(ADVANCED,[SET(ARTILLERY_BONUS,0.75)]),
		CASE(EXPERT,[SET(ARTILLERY_BONUS,1)]),
	END_SWITCH(),
	
	VAR(ARCHERY_BONUS,0),
	SWITCH(SECONDARY_SKILL_ARCHERY_LEVEL),
		CASE(BASIC,[SET(RANGE_ATTACK_MULTIPLIER,0.1)]),
		CASE(ADVANCED,[SET(RANGE_ATTACK_MULTIPLIER,0.25)]),
		CASE(EXPERT,[SET(RANGE_ATTACK_MULTIPLIER,0.5)]),
	END_SWITCH(),
	
	VAR(SPECIALTY_ATTACK,0),
	IF(IS_SPECIALTY_SKILL_BALLISTA_EXISTS.EQUALS(TRUE)),
	THEN(SPECIALTY_ATTACK.SET(HERO_LEVEL.MINUS(5).DIVIDE(10).FLOOR().PLUS(1))),
	VAR(CURRENT_ATTACK,ADD(BALLISTA_ATTACK,HERO_ATTACK,SPECIALTY_ATTACK)),
	VAR(ATTACK_BONUS,CURRENT_ATTACK.MINUS(DEFENDER_CURRENT_RANGED_DEFENSE).MULTIPLY(0.05)),
	
	VAR(MULTIPLIER,ADD(ARCHERY_BONUS,ATTACK_BONUS,ARTILLERY_BONUS,2)),
	VAR(FINAL_DAMAGE,
		RAND(BALLISTA_MIN_DAMAGE.MULTIPLY(MULTIPLIER),BALLISTA_MAX_DAMAGE.MULTIPLY(MULTIPLIER))),
	
	RETURN(FINAL_DAMAGE),
]


FUNC_REMOVE_STATUS(*UNIT,STATUS_TYPE)=[
	LOOP(I,STATUS,UNIT.STATUS,[
		IF(STATUS.TYPE.EQUALS(STATUS_TYPE),[
			UNIT.STATUS.REMOVE(STATUS)
		]),
	]),
	RETURN(UNIT),
]

FUNC_ADD_STATUS(*UNIT,ADDING_STATUS)=[
	LOOP(I,STATUS,UNIT.STATUS,[
		IF(STATUS.NAME.EQUALS(ADDING_STATUS.NAME),[
			UNIT.STATUS.REMOVE(STATUS),
			BREAK_LOOP(),
		]),
	]),
	UNIT.STATUS.ADD(ADDING_STATUS),
	RETURN(UNIT),
]

#################################
# Definition of basic functions #
#################################

# defines a variable and optionally assign a value
VAR(VARIABLE_NAME)
VAR(VARIABLE_NAME,VARIABLE_VALUE)

# initialize a new instance of a label
NEW(LABEL,VARIABLE_NAME)

LOOP(ITEM_INDEX,ITEM,ITEMS,LOOP_STATEMENTS)

LOOP(ITEM_INDEX,ITEM,ITEMS)
CONTINUE_LOOP()
BREAK_LOOP()

IF(BOOL)
THEN(STATEMENTS)
ELSEIF(BOOL)
ELSE(STATEMENTS)

IF(BOOL,THEN_STATEMENTS)

RETURN()
RETURN(VALUE)

ADD(COLLECTION,ITEM)
REMOVE(COLLECTION,ITEM)