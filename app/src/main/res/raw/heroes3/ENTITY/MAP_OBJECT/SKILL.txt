Skill={
	Skill_Execution_Type=,
}
Skill:[
	Spell,
	HeroSpecialitySkill,
	SecondarySkill,
	Unit_Skill
]

Skill_Execution_Type:[Active,Passive]
Channelling:[Not_Applicable,Instant]

Spell:[
	Spell_Bloodlust,
	Spell_Cure,
	Spell_Curse,
	Spell_Haste,
	Spell_Stone_Skin,
	Spell_Disrupting_Ray,
]

Hero_Specialty_Skill:[
	Specialty_Skill_Ballista,
	Specialty_Skill_Disrupting_Ray,
]

SecondarySkill:[
	SkillScouting,
	Secondary_Skill_Earth_Magic,
	SkillTactics,
	Secondary_Skill_Logistics,
	Secondary_Skill_Necromancy,
	Secondary_Skill_Resistance,
	Secondary_Skill_Leadership,
	Secondary_Skill_Artillery,
	Secondary_Skill_Archery,
	Secondary_Skill_Wisdom,
	Secondary_Skill_Air_Magic,
]

Unit_Skill:[
	Skill_Archangel_Resurrection,
	Skill_Archangel_Hatred,
	Skill_Archangel_Morale_Boost,
	Skill_Phoenix_Rebirth,
	Skill_Magic_Resistance,
]

Specialty_Skill=Hero_Specialty_Skill # Direct list assignment
Secondary_Skill=Hero_Secondary_Skill # Direct list assignment

##########
# Spells #
##########
#####################
# Spells\Fire Magic #
#####################
Spell_Bloodlust:[Spell_Bloodlust_Basic,Spell_Bloodlust_Advanced,Spell_Bloodlust_Expert]
Spell_Bloodlust(Unit,Execute_When,Attack_Bonus,Target_Type,Target_Count,Duration)={
	Execution=Active,
	Execute_When=Execute_When,
	Channelling=Instant,
	Target_Type=Target_Type,
	Excluded_Targets=[Undead,Nonliving,Elemental,Machine],
	Labels=[Fire_Magic,Buff],
	Results={
		Function=Func_Bloodlust,
		Function_Parameters=[Unit,Duration,Attack_Bonus,Unit.Melee_Attack],
	},
	Magic_Guide_Appearance_Probability={
		Inferno=0.53,
		Necropolis=0.32,
		Dungeon=0.3,
		Stronghold=0.53,
		Fortress=0.31,
		Conflux=0.31,
	},
}
Spell_Bloodlust_Basic=Spell_Bloodlust(?,After_User_Select_Unit,3,Friendly_Single,?)
Spell_Bloodlust_Advanced=Spell_Bloodlust(?,After_User_Select_Unit,6,Friendly_Single,?)
Spell_Bloodlust_Expert=Spell_Bloodlust(?,After_User_Select_Skill,6,Friendly_All,?)

Spell_Curse:[Spell_Curse_Basic,Spell_Curse_Advanced,Spell_Curse_Expert]
Spell_Curse(Unit,Execute_When,Duration,Target_Type)={
	Execution=Active,
	Execute_When=Execute_When,
	Channelling=Instant,
	Target_Type=Target_Type,
	Excluded_Target=[Undead,Nonliving,Elemental,Machine],
	Labels=[Mind_Magic,Fire_Magic,Debuff],
	Results={
		Function=Func_Curse,
		Function_Parameters=[Unit,Duration],
	},
	Magic_Guide_Appearance_Probability={
		Tower=0.25,
		Tower_No_Lib=0.20,
		Necropolis=0.54,
		Inferno=0.31,
		Dungeon=0.54,
	},
}
Spell_Curse_Basic=Spell_Curse(?,After_User_Select_Unit,?,Friendly_Single)
Spell_Curse_Advanced=Spell_Curse(?,After_User_Select_Unit,?,Friendly_Single)
Spell_Curse_Expert=Spell_Curse(?,After_User_Select_Skill,?,Friendly_All)


######################
# Spells\Water Magic #
######################
SPELL_CURE:[SPELL_CURE_BASIC,SPELL_CURE_ADVANCED,SPELL_CURE_EXPERT]
SPELL_CURE(UNIT,EXECUTE_WHEN,CURE_POINT,TARGET_TYPE,POWER)={
	EXECUTION=ACTIVE,
	EXECUTE_WHEN=EXECUTE_WHEN,
	CHANNELLING=INSTANT,
	TARGET_TYPE=TARGET_TYPE,
	EXCLUDED_TARGETS=[UNDEAD,NONLIVING,ELEMENTAL,MACHINE],
	LABELS=[WATER_MAGIC,BUFF],
	RESULTS=[
		{
			FUNCTION=FUNC_CURE,
			FUNCTION_PARAMETERS=[CURE_POINT,POWER,UNIT.MAX_HP],
			ON=UNIT.HP,
		},
		{
			FUNCTION=FUNC_REMOVE_EFFECT,
			FUNCTION_PARAMETERS=[UNIT,NEGATIVE],
		},
	],
	MAGIC_GUIDE_APPEARANCE_PROBABILITY={
		CASTLE=0.54,
		RAMPART=0.54,
		TOWER=0.39,
		TOWER_NO_LIB=0.31,
		INFERNO=0.31,
		DUNGEON=0.3,
		STRONGHOLD=0.31,
		FORTRESS=0.53,
		CONFLUX=0.31,
	},
}
SPELL_CURE_BASIC=SPELL_CURE(?,AFTER_USER_SELECT_UNIT,10,FRIENDLY_SINGLE,?)
SPELL_CURE_ADVANCED=SPELL_CURE(?,AFTER_USER_SELECT_UNIT,20,FRIENDLY_SINGLE,?)
SPELL_CURE_EXPERT=SPELL_CURE(?,AFTER_USER_SELECT_SKILL,30,FRIENDLY_ALL,?)

#########################
# Hero Speciality Skills #
#########################

HeroSpecialitySkill={
	RESULTS=[],
}
SPECIALTY_SKILL_BALLISTA(HERO,ENEMY_UNIT)={
	LABELS=[BUFF,PERMANENT_BUFF],
	RESULTS=[
		{
			FUNCTION=FUNC_BALLISTA_DAMAGE,
			FUNCTION_PARAMETERS=[
				HERO.SECONDARY_SKILLS.SECONDARY_SKILL_ARTILLERY.LEVEL,
				HERO.SECONDARY_SKILLS.SECONDARY_SKILL_ARCHERY.LEVEL,
				HERO.SPECIALTY_SKILL.EQUALS(SPECIALTY_SKILL_BALLISTA),
				BALLISTA.MIN_DAMAGE,
				BALLISTA.MAX_DAMAGE,
				BALLISTA.ATTACK,
				HERO.ATTACK,
				ENEMY_UNIT.CURRENT_RANGED_DEFENSE,
				HERO.LEVEL
			],
			ON=BALLISTA.FINAL_DAMAGE,
		}
	]
}
#########################
# Hero Secondary Skills #
#########################
SECONDARY_SKILL={}
SECONDARY_SKILL_ARTILLERY={
	LEVEL=0,
}
###############
# Unit Skills #
###############

SKILL_ARCHANGEL_RESURRECTION(STACK_NUMBER)={
	EXECUTION=ACTIVE,
	EXECUTE_WHEN=AFTER_USER_SELECT_UNIT,
	CHANNELLING=INSTANT,
	DURATION=PERMANENT,
	TARGET_TYPE=FRIENDLY_SINGLE,
	TARGET_COUNT=1,
	EXCLUDED_TARGET=[UNDEAD,NONLIVING,ELEMENTAL,MACHINE],
	RESULTS={
		ON=HP,
		FUNCTION=MULTIPLY,
		FUNCTION_PARAMETERS=[100,STACK_NUMBER],
	},
}

SKILL_HATRED(TARGET_LABELS,DAMAGE)={
	EXECUTION=PASSIVE,
	EXECUTE_WHEN=WHOLE_BATTLE,
	CHANNELLING=NOT_APPLICABLE,
	DURATION=BATTLE,
	TARGET_TYPE=ENEMY_BY_TYPE,
	TARGET=TARGET,
	RESULTS={
		ON=DAMAGE,
		FUNCTION=[FUNC_HATRED(1.5,DAMAGE,],
		FUNCTION_PARAMETERS=[1.5,ON],
	},
}

SKILL_HATRED:[
	SKILL_ARCHANGEL_HATRED,
	SKILL_ANGEL_HATRED,
	SKILL_ARCHDEMON_HATRED,
	SKILL_DEMON_HATRED,
	SKILL_BLACK_DRAGON_HATRED
]

# Skill inheritance
SKILL_ARCHANGEL_HATRED=SKILL_HATRED([DEVIL,ARCHDEVIL],DAMAGE)

# Archangel Morale Boost is applied for the whole battle.
# Returns the modified/boosted morale on all friendly units.
SKILL_ARCHANGEL_MORALE_BOOST={
	EXECUTION=PASSIVE,
	EXECUTE_WHEN=WHOLE_BATTLE,
	CHANNELLING=NOT_APPLICABLE,
	DURATION=BATTLE,
	TARGET_TYPE=FRIENDLY_ALL,
	EXCLUDED_TARGET=[UNDEAD,NONLIVING,ELEMENTAL,MACHINE],
	RESULTS={
		ON=MORALE,
		FUNCTION=ADD,
		FUNCTION_PARAMETERS=[1,ON],
	},
}

# Phoenix rebirth is triggered after a Phoenix stack enters Death state.
# Requires the stack's stack number.
# Returns the stack number which can be revived.
SKILL_PHOENIX_REBIRTH(STACK_NUMBER)={
	EXECUTION=PASSIVE,
	EXECUTE_WHEN=AFTER_DEATH,
	CHANNELLING=NOT_APPLICABLE,
	DURATION=PERMANENT,
	TARGET_TYPE=SELF,
	RESULTS={
		ON=STACK_NUMBER,
		FUNCTION=FUNC_PHOENIX_REBIRTH,
		FUNCTION_PARAMETERS=[0.2,STACK_NUMBER],
	}
}

# Magic resistance is settled when a unit is hit by magic.
# Requires the magic's labels, and the incoming damage.
# Returns the damage after resistance is applied.
SKILL_MAGIC_RESISTANCE(TARGET_MAGIC,RESISTANCE_RATIO,HIT_BY_MAGIC_TYPE,DAMAGE)={
	EXECUTION=PASSIVE_BEFORE_HIT_BY_MAGIC,
	EXECUTE_WHEN=BEFORE_HIT_BY,
	EXECUTION_WHEN_PARAMETER=MAGIC,
	EXECUTION_FUNCTION_PARAMETER=INCOMING_MAGIC_TYPE,
	CHANNELLING=NOT_APPLICABLE,
	DURATION=BATTLE,
	TARGET_TYPE=SELF,
	TARGET=TARGET_MAGIC,
	RESULTS={
		ON=DAMAGE,
		FUNCTION=FUNC_MAGIC_RESISTANCE,
		FUNCTION_PARAMETERS=[TARGET,HIT_BY_MAGIC_TYPE,RESISTANCE_RATIO,DAMAGE],
	},
}
