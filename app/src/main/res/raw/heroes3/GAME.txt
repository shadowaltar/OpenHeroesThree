DISPLAY_NAME=OpenHeroes3
NAME=HEROES3
KEY=OPEN_HEROES_3

FILE=[
	UI,
	ENTITY\MAP_OBJECT,
	ENTITY\MAP_OBJECT\HERO,
	ENTITY\MAP_OBJECT\UNIT,
	ENTITY\MAP_OBJECT\TOWN,
	ENTITY\MAP_OBJECT\MAP_INTERACTABLE,
	ENTITY\MAP_OBJECT\MAP_OBSTACLE,
	ENTITY\MAP_OBJECT\BATTLE_FIELD_OBSTACLE,
	ENTITY\TERRAIN,
	ENTITY\RIVER,
	ENTITY\ROAD,
]

#########



# SYSTEM-WIDE LABELS
SYSTEM_LABELS:[DISABLE_IN_EDITOR]

	
VALUE_COST_TYPE_LIST=[HP_COST,MP_COST,MOVEMENT_COST,RESOURCE_COST]
VALUE_MODIFIER_TYPE_LIST=[RANGED_TO_MELEE_MODIFIER,RANGED_IN_SIEGE_MODIFIER,
	MORALE_MODIFIER,LUCK_MODIFIER,IMMUNE_TO_MAGIC_PROBABILITY_MODIFIER,
	MP_COST_MODIFIER,MAGIC_DAMAGE_REDUCTION_MODIFIER]
	
# DERIVED LABELS
ATTACK_TYPE:[MELEE,RANGED]
MOVEMENT_TYPE:[NORMAL,FLY,TELEPORT]
BATTLE_FIELD_SHAPE_TYPE:[SIZE1,SIZE2]

# OTHER CUSTOM LABELS
CUSTOM_LABEL_LIST=[
	NOT_PLACED_ON_WATER,
	GOOD_ALIGN,EVIL_ALIGN,NEUTRAL_ALIGN,
	FIRE_SPELL,WATER_SPELL,WIND_SPELL,EARTH_SPELL,MIND_SPELL,
	GROWING, CAST_COUNT,
	IMMUNE_TO_JOUSTING,MULTI_ATTACK,MULTI_RETALIATION,
	FLYING,NO_MELEE_PENALTY,NO_SIEGE_PENALTY,JOUSTING,HATRED,CAN_CAST_MAGIC,
	IMMUNE_TO_MAGIC,IMMUNE_TO_MAGIC_AURA,
	MULTI_CELL_ATTACK,NONLIVING,MAGIC_DAMAGE_REDUCTION,NO_RANGE_PENALTY,
	FRIENDLY_FIRE,UNDEAD,ELEMENTAL,MACHINE,
]

GameSchedulingType:[RoundBased]
MapMode:[Single,Multi]

Game={
	SchedulingMode<GameSchedulingType>=RoundBased,
	MaxPlayerCount=8,
	MaxAIPlayerCount=8,
	MapMode<MapMode>=Multi,
},

# Define Game States
GameState=state({
	AwaitUserInput=false,
	PostState<Function>=,
	Outcomes=[],
}),
BattleState=GameState
AwaitInputBattleState=GameState{AwaitUserInput=true}
GameState:[
	BattleStart,
	
	PlaceUnits,
	PlaceFieldObjects,
	RunCustomActionBeforeBattle,
	CheckTactics,
	TacticalUnitMove,
	
	RunCustomActionsBeforeRound,
	RunAutoUnitActionsBeforeRound,
	DequeueUnit,
	EnqueueRoundSurvivors,
	RunAutoUnitActionsBeforeInput,
	
	UnitAttack,
	SettleFieldObjectEffectAfterMoveBeforeAttack,
	SettleAttackDamage,
	Counter,
	SettleCounterDamage,
	UnitAttackAgain,
	SettleDoubleAttackDamage,
	
	UnitUseSkill,
	SettleUnitSpellDamage,
	SettleUnitSkillEffect,
	
	SettleMorale,
	
	UnitDefend,
	UnitActLater,
	
	UnitMove,
	SettleFieldObjectEffectAfterMove,
	
	UseSkill,
	SettlePlayerSkillDamage,
	SettlePlayerSkillEffect,
	
	EscapeOrSurrender,
]

AwaitInputBattleState={AwaitUserInput=true}
AwaitInputBattleState:[
	AwaitPlayerTacticalInput,
	AwaitPlayerInput,
]

Scheduler={
	Type<SchedulerType>=,
	Phrase<BattlePhrase>=,
	BeforeStart<Function,List>=,
	AfterAction<Function,List>=,
	AvailableActions<List<UserAction>>=,
}

Scheduler:[RoundBasedBattleScheduler]
SchedulerType:[RoundBased,TickBased]
BattlePhrase:[Tactical,Battle]
UserAction:[BattleAction]
BattleAction:[ShowOptions,TacticalSkip,TacticalPhraseEnd,Surrender,Retreat,CastMagic,UnitMove,UnitWait,UnitDefend,UnitCastMagic]


BattleFieldLatticeType:[
	Rectangle,
	RectangleInterlaced,
	Graph,
	Arbitrary,
]
CellType:[
	Rectangle,
	Hex,
]
BattleField(CellType<CellType>,Width<Int>,Height<Int>)={
	Type<BattleFieldLatticeType>=,
	CustomFieldTypeCoordinates<List>=,
	CellType<BattleFieldCellType>=,
	BackgroundType<BattleFieldBackgroundType>=,
	BattleFieldBackground=,
}
BattleFieldParams={
	TerrainType<TerrainType>=,
	SecondaryTerrainType<SecondaryTerrainType>=,
	IsTown=False,
	IsBeach=False,
	FieldObjects=[],
	FieldObjectPlacementFunction<Function>=,
	BackgroundAssignmentFunction<Function>=,
}
# setup battlefield: background
# place field objects: castle wall and npc
# place attacker/defender objects
Battle(
	BattleFieldParams,
	Attacker<Hero>,
	Defender<Hero>
)=
{
	Field=BattleField={
		Type=RectangleInterlaced,
		CellType=Hex,
		TileSet=TileSet,
		Width=15,
		Height=11,
		FieldObjects=FieldObjects,
		BackgroundType<BackgroundTerrainType>=
			GetBattlefieldTerrainType(BattleFieldParams.TerrainType,
				BattleFieldParams.SecondaryTerrainType),
	},
	StateRelationships=relationships([
		# place units, field objects, check if tactical skill is in effect
		PlaceUnits->PlaceFieldObjects->CheckTactics,
		CheckTactics.TacticExists->SetTactic->CheckRoundStart,
		CheckTactics.TacticNotExists->CheckRoundStart,
		# perform any round-start specific action (and check victory cond), then get the next active unit

		CheckRoundStart.Normal->DequeueNextUnit,
		CheckRoundStart.HasRoundStartAction->PerformRoundStartAction->CheckVictory,
		CheckVictory.Victory->Victory,
		CheckVictory.Normal+PreviousState=PerformRoundStartAction->DequeueNextUnit,
		
		# before player or cpu can move, the units fetch one by one shall check if they cannot move (or other effects) first
		DequeueNextUnit->CheckUnitStatusBeforeAction,
		ChekUnitStatusBeforeAction.UnitDead->CheckVictory, # if unit is dead, check if opponent wins
		ChekUnitStatusBeforeAction.Skip->DequeueNextUnit, # if unit is low morale or is frightened, find next unit
		ChekUnitStatusBeforeAction.AutoCast->UnitCastAwaitAction,
		ChekUnitStatusBeforeAction.Normal->AwaitAction,
		
		UnitPerformAction.PerformedAttack->CheckTargetStatus,
		CheckTargetStatus.TookDamage->UnitPerformCounterAction,
		CheckTargetStatus.UnitDead->CheckVictory,
		UnitPerformCounterAction.PerformedAttack->CheckTargetCounteredStatus,
		UnitPerformCounterAction.PerformedCastSpell->CheckTargetCounteredStatus,
		CheckTargetCounteredStatus.TookDamage->CheckHighMorale,
		CheckTargetCounteredStatus.UnitDead->CheckVictory, # end of attack+counter-attack
		CheckMorale.MoraleHigh->
		
		UnitPerformAction.PerformedCastSpell->CheckTargetSpellReaction,
		UnitPerformAction.PerformedWait->Put
		UnitPerformAction.PerformedDefence->DequeueNextUnit,
		
		# victory cond check
		CheckVictory.Victory->Victory,
		CheckVictory.Continue->CheckCounterAction, #?
	]),
	UnitPlacementFunction<Function>=,
	Scheduler=RoundBasedBattleScheduler(Attacker,Defender,BattleFieldParams.),
	Attacker=Attacker,
	Defender=Defender,
	NonPlayerableAttackUnits=,
	NonPlayerableDefendUnits=,
	NeutralUnits=,
	UnitPlacementFunction=PlaceUnitToBattleField(Field,,
	FieldObjectGenerationAndPlacementFunction<Function>=, # need to consider town type battle
	Town=,
}

RoundBasedBattleScheduler(Attacker<Hero>,Defender<Hero>)={
	Type=RoundBased,
	CurrentState<BattleState>=,
	PreTasks<Function>=[
		PlaceUnits(
		GoToTacticalPhraseState(Attacker,Defender),
	],
	RoundPhrases<Phrase>=[NormalPhrase,MoraleBoostedWaitPhrase,WaitPhrase],
	PostTasks<Function>=[ShowSummary],
	PhraseState={
		TacticalPhrase=[TacticalMoveState],
		BattlePhrase=[UnitBadMoraleCheck,UnitAutoCast,UserControlUnitAction,
	},
	RoundActions=[
		HeroCastSpell,Surrender,Retreat,
	],
	OnActionHandler=,
	PHRASES=[
		TACTICAL={
			ACTIONS={
				MOVE_UNIT,
				CONFIRM_TACTIC,
			}
		},
		BATTLE,
	]
	ACTIONS={
		
		CAST_SPELL=,
		MOVE_UNIT=,
		
	}
}
GoToTacticalPhraseState=Func([*Scheduler<Scheduler>,Attacker<Hero>,Defender<Hero>],[
	AttackerSkillLevel=Attacker.SecondarySkills.First(#SkillTactics).Level,
	DefenderSkillLevel=Defender.SecondarySkills.First(#SkillTactics).Level,
	If(AttackerSkillLevel!=DefenderSkillLevel),
	Then([Tactical=New(TacticalPhrase),])
	Return(),
])

PlaceUnitToBattleField=Func(
	[Field,AttackUnits<List<Unit>>],
	[
	]
)

AssignBattleground=Func(
	[TerrainType<TerrainType>,SecondaryTerrainType<SecondaryTerrainType>],
	[
		rGetBattlefieldTerrainType(TerrainType,
	]
)

FuncDetermineBattleSequence=DefFunc([Attacker<Hero>,Defender<Hero>,ArenaType<ArenaType>],
	[],
)

GetSubs=ExternalDefFunc<List>([Label],"GetImmediateSubTypes") # get the enum members or immediate sub types

First=ExternalDefFunc<Label>([List<Label>,Label],"FirstOfType") # get the instance which is the first appearance of a certain label/type.


