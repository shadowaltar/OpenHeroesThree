# Predefined Functions:
# ADD([?]), MULTIPLY([?]), INT_FLOOR(?), RETURN(?), CONTAINS([?], ?), RAND01(), OVERRIDE(BASE, EXTENSION, CONDITION=), DEF(?,?), EQUALS(?,?), LAMBDA(?), LAMBDA(?,?), ISTRUE(?), ISFALSE(?), APPEND([?],?),  REMOVE([?],?),  REMOVE_IF([?],?), LOOP_ALL(?,?,?,?), CONTINUE_LOOP(?), END_LOOP(?), IF(?), THEN([?]), OR_ELSE([?]), LOOP_IF(?,?)

# Functions can also be expressed like below:
# PARAM0.CONTAINS(PARAM1), or CONTAINS={PARAM0=PARAM0,PARAM1=PARAM1}
# When function param is named (like "EXTENSION" in OVERRIDE),
# it is a static param, a predefined value or runtime value.
# otherwise it is denoted by ?, means it can only be resolved at runtime.
# For unknown length of runtime param list (1 or more), it is [?].
# For unknown length of runtime param map (1 or more), it is {?}.

# Definition of Label
# Label can be a map, a list, a single value, a piece of function, or simply
# stands for a specific string itself.
# Defining the content of label, the label must be followed by "=".

# Definition of List
# List is a collection of items. Usually it contains labels.
# Items of a list are surrounded by "[" and "]", separated by ",".

# Definition of Map
# Map is a collection of named/labelled items, a list of key-value pairs.
# Items of a map are surrounded by "{" and "}", separated by ",".
# Key and Value must be defined in one item of a map, separated by "=".
# Value can be anything, like a list, another map, a label, or even a function.
# If the map label is followed by (), it is a parameterized map.

# Access a member of List or Map
# Use dot-notation to access any member of a list or map. Index is zero-based.
# E.g. LIST_EXAMPLE=[ITEM1,ITEM2], TEMP_VARIABLE=LIST_EXAMPLE.0
# E.g. MAP_EXAMPLE={KEY1=ITEM1,KEY2=ITEM2], TEMP_VARIABLE1=MAP_EXAMPLE.KEY1 or
# TEMP_VARIABLE2=MAP_EXAMPLE.0, TEMP_VARIABLE1.EQUALS(TEMP_VARIABLE2)

# Defining Sub-types
# Defining the subtypes of a label, the label must be followed by ":", and then a list
# of labels. The items in the list are the subtypes of the label.
# NOTE: it is mandatory if a sub list / map is defined via Inheritance.

# Definition of Function
# Function is a collection of sequentially ordered functions.
# It must contain at least one RETURN(), which is to output a value.
# So in the end the smallest function must be those predefined functions like ADD().
# A function's signature is a FunctionLabel with ParamList and FunctionBody,
# ParamList is a list of labels which "[]" is replaced by "()";
# Body is another list, which contains combination of predefined/user-defined functions.
# ParamList follows FunctionLabel without any separator.
# FunctionBody follows ParamList with assignment operator "=".
# E.g. HELLO(P1,P2)=[DEF(X),ASSIGN(X,ADD(P1,P2)),RETURN(X),]

# Definition of Lambda Expression
# A lambda expression is defined using function LAMBDA(). The parameter
# passed in to the anonymous function is denoted by "_".
# E.g. LAMBDA(_.EQUALS(A_LABEL)).
# This is equivalent to this expression: LAMBDA(DEF(_),_.EQUALS(A_LABEL))
# For multiple parameters to be passed in, e.g.: LAMBDA(DEF(A,B),A.EQUALS(B))

# Parameterized List and Map
# Same as function, but without any RETURN() functions, and this is also the only
# way to distinguish between a parameterized-list and a function, since both uses [].
# For a map it is fine as it always uses {} to wrap the items inside.

# List and Map Inheritance
# Syntax for list: SUB_LIST = SUPER_LIST(OPTIONAL_PARAMS)
# Syntax for map: SUB_MAP = SUPER_MAP(OPTIONAL_PARAMS)
# Usually given a parameterized super list / map, by filling in some parameters, then
# assign to a new label as its sub list / map.
# NOTE: "SUPER_LABEL:[SUB_LABELS]" syntax is mandatory to define the sub-types.

# If-then-else structure
# IF, THEN, OR_ELSE

# Looping structure
# LOOP_ALL, CONTINUE_LOOP, END_LOOP; LOOP_IF

DURATION_TYPE:[NONE,ROUND_BASED,REAL_TIME]
